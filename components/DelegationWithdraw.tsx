"use client";

import { useState } from "react";
import { getMetaMaskSmartAccount } from "@/lib/smartAccount";
import { switchToMonadNetwork } from "@/lib/network";
import { publicClient } from "@/lib/clients";
import { erc20Abi } from "viem";
import { USDC_TEST } from "@/lib/chain";
import { redeemDelegationGasless, redeemDelegationReal } from "@/lib/delegation";

export default function DelegationWithdraw() {
  const [delegatorAddress, setDelegatorAddress] = useState<`0x${string}`>("0x1bd5aCb8069DA1051911eB80A37723aA1ce5919C");
  const [delegateAddress, setDelegateAddress] = useState<`0x${string}`>("0xa51DbFfE49FA6Fe3fC873094e47184aE624cd76f");
  const [withdrawAmount, setWithdrawAmount] = useState(10);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string>("");
  const [balance, setBalance] = useState<string>("");
  const [useGasless, setUseGasless] = useState(true);

  const checkBalance = async () => {
    try {
      await switchToMonadNetwork();
      
      const balance = await publicClient.readContract({
        address: USDC_TEST,
        abi: erc20Abi,
        functionName: "balanceOf",
        args: [delegateAddress],
      });

      const decimals = await publicClient.readContract({
        address: USDC_TEST,
        abi: erc20Abi,
        functionName: "decimals",
      });

      const formattedBalance = (Number(balance) / Math.pow(10, decimals)).toFixed(6);
      setBalance(`${formattedBalance} mUSDC`);
    } catch (err: any) {
      console.error("Balance check error:", err);
      setError(`L·ªói check balance: ${err.message}`);
    }
  };

  const withdrawFromDelegation = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setResult(null);

    try {
      // Chuy·ªÉn sang Monad Testnet
      await switchToMonadNetwork();

      // L·∫•y Smart Account c·ªßa v√≠ B (delegate)
      const delegateSmartAccount = await getMetaMaskSmartAccount();
      
      // Ki·ªÉm tra xem ƒë·ªãa ch·ªâ hi·ªán t·∫°i c√≥ ph·∫£i l√† delegate kh√¥ng
      if (delegateSmartAccount.address.toLowerCase() !== delegateAddress.toLowerCase()) {
        throw new Error(`ƒê·ªãa ch·ªâ hi·ªán t·∫°i (${delegateSmartAccount.address}) kh√¥ng kh·ªõp v·ªõi delegate address (${delegateAddress})`);
      }

      let result;
      
      if (useGasless) {
        // Gasless withdrawal v·ªõi Pimlico
        console.log("üöÄ S·ª≠ d·ª•ng gasless transaction...");
        
        // T√¨m signed delegation t·ª´ localStorage
        const existingDelegations = JSON.parse(localStorage.getItem('delegations') || '[]');
        const delegation = existingDelegations.find((d: any) => 
          d.delegator.toLowerCase() === delegatorAddress.toLowerCase() &&
          d.delegate.toLowerCase() === delegateAddress.toLowerCase() &&
          d.status === "ACTIVE"
        );
        
        if (!delegation) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y delegation t·ª´ ${delegatorAddress} ƒë·∫øn ${delegateAddress}`);
        }
        
        // Validate delegation amount (mock validation)
        const maxAmount = 1000; // Mock max amount
        if (withdrawAmount > maxAmount) {
          throw new Error(`S·ªë ti·ªÅn r√∫t (${withdrawAmount}) v∆∞·ª£t qu√° gi·ªõi h·∫°n delegation (${maxAmount} mUSDC)`);
        }
        
        result = await redeemDelegationGasless(
          delegateSmartAccount,
          delegation,
          withdrawAmount
        );
      } else {
        // Regular ERC20 transfer
        console.log("üí∞ S·ª≠ d·ª•ng regular transaction...");
        
        // Request accounts ƒë·ªÉ authorize MetaMask
        if (typeof window !== "undefined" && window.ethereum) {
          await window.ethereum.request({
            method: "eth_requestAccounts",
          });
        }
        
        // L·∫•y EOA address t·ª´ MetaMask (v√≠ A - delegator)
        const accounts = await window.ethereum.request({
          method: "eth_accounts",
        });
        
        if (accounts.length === 0) {
          throw new Error("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c k·∫øt n·ªëi");
        }
        
        const delegatorAddress = accounts[0];
        
        // T·∫°o wallet client ƒë·ªÉ th·ª±c hi·ªán transfer
        const { createWalletClient, custom } = await import("viem");
        const { monadTestnet } = await import("@/lib/chain");
        
        const walletClient = createWalletClient({
          account: delegatorAddress as `0x${string}`,
          transport: custom(window.ethereum),
          chain: monadTestnet,
        });

        // Th·ª±c hi·ªán ERC20 transfer: v√≠ A chuy·ªÉn token cho v√≠ B
        const txHash = await walletClient.writeContract({
          address: USDC_TEST,
          abi: erc20Abi,
          functionName: "transfer",
          args: [delegateAddress, BigInt(withdrawAmount * 1000000)],
        });

        // Wait for transaction confirmation
        const receipt = await publicClient.waitForTransactionReceipt({
          hash: txHash,
        });

        result = {
          delegator: delegatorAddress,
          delegate: delegateAddress,
          requestedAmount: withdrawAmount,
          actualWithdrawn: withdrawAmount,
          transactionHash: txHash,
          status: "SUCCESS",
          message: `ƒê√£ r√∫t th√†nh c√¥ng ${withdrawAmount} mUSDC t·ª´ delegation`,
          timestamp: new Date().toISOString(),
          gasUsed: receipt.gasUsed.toString(),
          blockNumber: receipt.blockNumber.toString(),
          gasless: false
        };
      }

      setResult(result);
      
      // Check balance sau khi r√∫t
      setTimeout(() => {
        checkBalance();
      }, 1000);

    } catch (err: any) {
      console.error("Withdrawal error:", err);
      setError(err.message ?? String(err));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 600, margin: "0 auto", padding: 20 }}>
      <h2>üí∞ Transfer Token (REAL)</h2>
      <p style={{ color: "#666", marginBottom: 20 }}>
        V√≠ A chuy·ªÉn token th·ª±c t·∫ø cho v√≠ B - ERC20 transfer thu·∫ßn t√∫y
      </p>
      
      <div style={{ marginBottom: 20, padding: 12, backgroundColor: "#fff3cd", borderRadius: 8, border: "1px solid #ffc107" }}>
        <button 
          onClick={() => {
            localStorage.removeItem('delegations');
            alert('ƒê√£ x√≥a t·∫•t c·∫£ delegation data t·ª´ localStorage');
          }}
          style={{ 
            padding: 8, 
            backgroundColor: "#ffc107", 
            color: "black", 
            border: "none", 
            borderRadius: 4,
            cursor: "pointer"
          }}
        >
          üóëÔ∏è Clear All Mock Data
        </button>
        <small style={{ display: "block", marginTop: 4 }}>
          Click ƒë·ªÉ x√≥a t·∫•t c·∫£ mock data t·ª´ localStorage
        </small>
      </div>

      {/* Balance Check Section */}
      <div style={{ marginBottom: 20, padding: 16, backgroundColor: "#f8f9fa", borderRadius: 8 }}>
        <h4>üìä Check S·ªë D∆∞ V√≠ B</h4>
        <p><strong>Delegate Address:</strong> {delegateAddress}</p>
        {balance && (
          <p style={{ color: "#00b894", fontWeight: "bold" }}>
            <strong>S·ªë d∆∞ hi·ªán t·∫°i:</strong> {balance}
          </p>
        )}
        <button 
          onClick={checkBalance}
          style={{ 
            padding: 8, 
            backgroundColor: "#28a745", 
            color: "white", 
            border: "none", 
            borderRadius: 4,
            cursor: "pointer"
          }}
        >
          Check Balance
        </button>
      </div>

      <form onSubmit={withdrawFromDelegation} style={{ display: "flex", flexDirection: "column", gap: 16 }}>
        <div>
          <label>
            Delegator Address (V√≠ A - ng∆∞·ªùi ·ªßy quy·ªÅn)
            <input 
              value={delegatorAddress} 
              onChange={e => setDelegatorAddress(e.target.value as `0x${string}`)} 
              style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              placeholder="0x..."
            />
          </label>
        </div>

        <div>
          <label>
            Delegate Address (V√≠ B - ng∆∞·ªùi ƒë∆∞·ª£c ·ªßy quy·ªÅn)
            <input 
              value={delegateAddress} 
              onChange={e => setDelegateAddress(e.target.value as `0x${string}`)} 
              style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              placeholder="0x..."
            />
          </label>
        </div>

        <div>
          <label>
            Amount to Withdraw (mUSDC)
            <input 
              type="number" 
              value={withdrawAmount} 
              onChange={e => setWithdrawAmount(Number(e.target.value))} 
              style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              min="1"
            />
          </label>
        </div>

        <div style={{ marginBottom: 16 }}>
          <label style={{ display: "flex", alignItems: "center", gap: 8 }}>
            <input 
              type="checkbox" 
              checked={useGasless}
              onChange={e => setUseGasless(e.target.checked)}
            />
            <span>üöÄ Use Gasless Transaction (Pimlico)</span>
          </label>
          <small style={{ color: "#666", marginLeft: 24 }}>
            {useGasless ? "User kh√¥ng c·∫ßn tr·∫£ gas fee" : "User ph·∫£i tr·∫£ gas fee"}
          </small>
        </div>

        <button 
          type="submit" 
          disabled={loading}
          style={{ 
            padding: 12, 
            backgroundColor: loading ? "#ccc" : "#dc3545", 
            color: "white", 
            border: "none", 
            borderRadius: 8,
            cursor: loading ? "not-allowed" : "pointer"
          }}
        >
          {loading ? "ƒêang chuy·ªÉn..." : "V√≠ A chuy·ªÉn Token cho V√≠ B"}
        </button>
      </form>

      {error && (
        <div style={{ 
          padding: 12, 
          backgroundColor: "#ffe6e6", 
          border: "1px solid #ff6b6b", 
          borderRadius: 8,
          color: "#d63031",
          marginTop: 16
        }}>
          <strong>L·ªói:</strong> {error}
        </div>
      )}

      {result && (
        <div style={{ 
          padding: 12, 
          backgroundColor: "#e0ffe0", 
          border: "1px solid #00b894", 
          borderRadius: 8,
          color: "#00b894",
          marginTop: 16
        }}>
          <strong>‚úÖ Withdrawal Successful!</strong>
          <div style={{ marginTop: 8 }}>
            <p><strong>Delegator:</strong> {result.delegator}</p>
            <p><strong>Delegate:</strong> {result.delegate}</p>
            <p><strong>Requested Amount:</strong> {result.requestedAmount} mUSDC</p>
            <p><strong>Actual Withdrawn:</strong> {result.actualWithdrawn} mUSDC</p>
            {result.userOpHash && (
              <p><strong>UserOp Hash:</strong> {result.userOpHash}</p>
            )}
            <p><strong>Transaction Hash:</strong> {result.transactionHash}</p>
            <p><strong>Type:</strong> {result.gasless ? "üöÄ Gasless (Pimlico)" : "üí∞ Regular"}</p>
            <p><strong>Block Number:</strong> {result.blockNumber}</p>
            <p><strong>Gas Used:</strong> {result.gasUsed}</p>
            <p><strong>Status:</strong> {result.status}</p>
            <p><strong>Message:</strong> {result.message}</p>
            <p><strong>Withdrawn At:</strong> {new Date(result.timestamp).toLocaleString()}</p>
          </div>
          
          <div style={{ marginTop: 12, padding: 8, backgroundColor: "#f8f9fa", borderRadius: 4 }}>
            <strong>üéâ Success!</strong> V√≠ A ƒë√£ chuy·ªÉn th√†nh c√¥ng token cho v√≠ B.
            <br />
            <small><strong>REAL TRANSACTION:</strong> Token ƒë√£ ƒë∆∞·ª£c chuy·ªÉn th·ª±c t·∫ø t·ª´ v√≠ A sang v√≠ B tr√™n blockchain.</small>
          </div>
        </div>
      )}

      <div style={{ marginTop: 20, padding: 16, backgroundColor: "#f8f9fa", borderRadius: 8 }}>
        <h4>üìã H∆∞·ªõng d·∫´n Transfer:</h4>
        <ol>
          <li><strong>Check Balance:</strong> Xem s·ªë d∆∞ hi·ªán t·∫°i c·ªßa v√≠ B</li>
          <li><strong>K·∫øt n·ªëi v√≠ A:</strong> MetaMask ph·∫£i k·∫øt n·ªëi v·ªõi ƒë·ªãa ch·ªâ delegator</li>
          <li><strong>Nh·∫≠p th√¥ng tin:</strong> Delegator v√† delegate addresses</li>
          <li><strong>Ch·ªçn amount:</strong> S·ªë l∆∞·ª£ng mu·ªën chuy·ªÉn (kh√¥ng gi·ªõi h·∫°n)</li>
          <li><strong>Click Transfer:</strong> V√≠ A chuy·ªÉn token cho v√≠ B</li>
          <li><strong>Check Balance:</strong> Xem s·ªë d∆∞ sau khi chuy·ªÉn</li>
        </ol>
        
        <h4>üîç K·∫øt qu·∫£ mong ƒë·ª£i (REAL):</h4>
        <ul>
          <li><strong>Before:</strong> V√≠ B c√≥ 0 mUSDC</li>
          <li><strong>After:</strong> V√≠ B c√≥ {withdrawAmount} mUSDC</li>
          <li><strong>V√≠ A:</strong> S·ªë d∆∞ gi·∫£m {withdrawAmount} mUSDC</li>
          <li><strong>Blockchain:</strong> Transaction th·ª±c t·∫ø ƒë∆∞·ª£c ghi v√†o block</li>
          <li><strong>Gas:</strong> Ph·∫£i tr·∫£ gas fee cho transaction</li>
        </ul>
      </div>
    </div>
  );
}
